// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.2
// source: spinresp.proto

package spinresp

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type UUID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UUID) Reset() {
	*x = UUID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spinresp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UUID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UUID) ProtoMessage() {}

func (x *UUID) ProtoReflect() protoreflect.Message {
	mi := &file_spinresp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UUID.ProtoReflect.Descriptor instead.
func (*UUID) Descriptor() ([]byte, []int) {
	return file_spinresp_proto_rawDescGZIP(), []int{0}
}

func (x *UUID) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type JoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CaptainId *UUID `protobuf:"bytes,1,opt,name=captain_id,json=captainId,proto3" json:"captain_id,omitempty"`
}

func (x *JoinRequest) Reset() {
	*x = JoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spinresp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinRequest) ProtoMessage() {}

func (x *JoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spinresp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinRequest.ProtoReflect.Descriptor instead.
func (*JoinRequest) Descriptor() ([]byte, []int) {
	return file_spinresp_proto_rawDescGZIP(), []int{1}
}

func (x *JoinRequest) GetCaptainId() *UUID {
	if x != nil {
		return x.CaptainId
	}
	return nil
}

type TaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId *UUID `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *TaskRequest) Reset() {
	*x = TaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spinresp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRequest) ProtoMessage() {}

func (x *TaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spinresp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRequest.ProtoReflect.Descriptor instead.
func (*TaskRequest) Descriptor() ([]byte, []int) {
	return file_spinresp_proto_rawDescGZIP(), []int{2}
}

func (x *TaskRequest) GetTaskId() *UUID {
	if x != nil {
		return x.TaskId
	}
	return nil
}

var File_spinresp_proto protoreflect.FileDescriptor

var file_spinresp_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x73, 0x70, 0x69, 0x6e, 0x72, 0x65, 0x73, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x73, 0x70, 0x69, 0x6e, 0x72, 0x65, 0x73, 0x70, 0x22, 0x1c, 0x0a, 0x04, 0x55, 0x55,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3c, 0x0a, 0x0b, 0x4a, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0a, 0x63, 0x61, 0x70, 0x74, 0x61,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x70,
	0x69, 0x6e, 0x72, 0x65, 0x73, 0x70, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x09, 0x63, 0x61, 0x70,
	0x74, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x70, 0x69, 0x6e, 0x72, 0x65, 0x73,
	0x70, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x32, 0x43,
	0x0a, 0x07, 0x53, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x06, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x12, 0x15, 0x2e, 0x73, 0x70, 0x69, 0x6e, 0x72, 0x65, 0x73, 0x70, 0x2e, 0x4a,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x73, 0x70, 0x69,
	0x6e, 0x72, 0x65, 0x73, 0x70, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x30, 0x01, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x43, 0x6f, 0x64, 0x79, 0x50, 0x65, 0x72, 0x61, 0x6b, 0x73, 0x6c, 0x69, 0x73, 0x2f,
	0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x70, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x2f, 0x73, 0x70, 0x69, 0x6e, 0x72, 0x65, 0x73, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_spinresp_proto_rawDescOnce sync.Once
	file_spinresp_proto_rawDescData = file_spinresp_proto_rawDesc
)

func file_spinresp_proto_rawDescGZIP() []byte {
	file_spinresp_proto_rawDescOnce.Do(func() {
		file_spinresp_proto_rawDescData = protoimpl.X.CompressGZIP(file_spinresp_proto_rawDescData)
	})
	return file_spinresp_proto_rawDescData
}

var file_spinresp_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_spinresp_proto_goTypes = []interface{}{
	(*UUID)(nil),        // 0: spinresp.UUID
	(*JoinRequest)(nil), // 1: spinresp.JoinRequest
	(*TaskRequest)(nil), // 2: spinresp.TaskRequest
}
var file_spinresp_proto_depIdxs = []int32{
	0, // 0: spinresp.JoinRequest.captain_id:type_name -> spinresp.UUID
	0, // 1: spinresp.TaskRequest.task_id:type_name -> spinresp.UUID
	1, // 2: spinresp.Spinner.Attach:input_type -> spinresp.JoinRequest
	2, // 3: spinresp.Spinner.Attach:output_type -> spinresp.TaskRequest
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_spinresp_proto_init() }
func file_spinresp_proto_init() {
	if File_spinresp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_spinresp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UUID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spinresp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spinresp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spinresp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spinresp_proto_goTypes,
		DependencyIndexes: file_spinresp_proto_depIdxs,
		MessageInfos:      file_spinresp_proto_msgTypes,
	}.Build()
	File_spinresp_proto = out.File
	file_spinresp_proto_rawDesc = nil
	file_spinresp_proto_goTypes = nil
	file_spinresp_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SpinnerClient is the client API for Spinner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SpinnerClient interface {
	Attach(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (Spinner_AttachClient, error)
}

type spinnerClient struct {
	cc grpc.ClientConnInterface
}

func NewSpinnerClient(cc grpc.ClientConnInterface) SpinnerClient {
	return &spinnerClient{cc}
}

func (c *spinnerClient) Attach(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (Spinner_AttachClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Spinner_serviceDesc.Streams[0], "/spinresp.Spinner/Attach", opts...)
	if err != nil {
		return nil, err
	}
	x := &spinnerAttachClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Spinner_AttachClient interface {
	Recv() (*TaskRequest, error)
	grpc.ClientStream
}

type spinnerAttachClient struct {
	grpc.ClientStream
}

func (x *spinnerAttachClient) Recv() (*TaskRequest, error) {
	m := new(TaskRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SpinnerServer is the server API for Spinner service.
type SpinnerServer interface {
	Attach(*JoinRequest, Spinner_AttachServer) error
}

// UnimplementedSpinnerServer can be embedded to have forward compatible implementations.
type UnimplementedSpinnerServer struct {
}

func (*UnimplementedSpinnerServer) Attach(*JoinRequest, Spinner_AttachServer) error {
	return status.Errorf(codes.Unimplemented, "method Attach not implemented")
}

func RegisterSpinnerServer(s *grpc.Server, srv SpinnerServer) {
	s.RegisterService(&_Spinner_serviceDesc, srv)
}

func _Spinner_Attach_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JoinRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SpinnerServer).Attach(m, &spinnerAttachServer{stream})
}

type Spinner_AttachServer interface {
	Send(*TaskRequest) error
	grpc.ServerStream
}

type spinnerAttachServer struct {
	grpc.ServerStream
}

func (x *spinnerAttachServer) Send(m *TaskRequest) error {
	return x.ServerStream.SendMsg(m)
}

var _Spinner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spinresp.Spinner",
	HandlerType: (*SpinnerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Attach",
			Handler:       _Spinner_Attach_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "spinresp.proto",
}
